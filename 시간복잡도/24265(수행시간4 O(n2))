import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));


			long n = Integer.parseInt(br.readLine());
		
		 
		  
		  System.out.println((n*(n-1))/2); 
        
          /*
           int sum = 0;
		  // n = 5              n-1 x n 이고 i는 n-1 j는 i+1이기 때문에 중간에 만나서 결국 횟수에 /2를 해야함
		  for(int i=1; i<=n-1; i++) { // i=1; i<=4; i++  2 3 4 
			  
			  for(int j=i+1; j<=n; j++) { // j=2 //2 3 4 3 4 4 // 3 4 4 // 4 
				  sum++;
          */
		  System.out.println(2);
		
		
		
		br.close();
	}
	
	
}
/*
O(n2) 평방 시간(2차 시간) 알고리즘 (quadratic time algorithm)

문제 해결 단계의 수가 입력값 n의 제곱으로 증가
. n이 적을 경우에 만 사용해야 하는 느리고 비효율적인 알고리즘
예) 2번 중첩된 반복문(for 문), 버블정렬,삽입정렬,선택정렬 등


*/
