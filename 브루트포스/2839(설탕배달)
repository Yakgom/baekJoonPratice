import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Main {
	public static void main(String[] args) throws Exception {
		// BufferedReader를 사용하여 입력을 빠르게 받음
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		int N = Integer.parseInt(br.readLine()); // 테스트를 할 정수를 받음

		int result = N; // 값이 변동될수있음으로 result라는 변수에 담음
		int stack = 0; // 설탕 갯수를 세어줄 stack
		while (result > 2) { // 3미만은 들어와도 어차피 -1 이므로 2 초과부터 조건식을 셈

			if (result % 5 % 3 == 0) { // 5로 나누고 나머지를 3으로 나눴을때는 바로 갯수를 세어줌
				stack += result / 5;
				result = result % 5;
				stack += result / 3;
				result = result % 3;
			}
			if (result % 5 % 3 != 0) { // 만약 5로 나누고 3으로 다시 나눴을때 나머지가 남으면
				
				int result1 = findA(result); // Case1 5로 빼면서 3으로 나눴을때 0인지 
				
				int result2 = findB(result); // Case2 처음부터 다 나눴을때 3으로 0이 가능한지
				
				if(result1 == 0 || result2 == 0) { // 돌아온값이 둘중에 하나가 0이면 min 값에 0 이 들어감으로 가능한 수를 넣어주기 위해 조건식
					stack = Math.max(result1, result2);
				}else {
					stack =Math.min(result1, result2); // 둘다 stack 값이 돌아왔다면 둘중 하나의 낮은값을 출력하기위해 stack 에 넣어줌
				}
				break;
			}
			
		}

		if (stack > 0) { // 만약 5나 3으로 나누는게 가능한 수라면 출력
			System.out.println(stack);
		} else { // 아니라면 -1
			System.out.println(-1);
		}

	}
	public static int findA(int result) { // result를 받아서 -5 를 하면서 3으로 나눠지는지확인함 
		
		int stack = 0;
		int minStack =Integer.MAX_VALUE;

		
		while(result > 4) { 
			result-=5; 
			stack++; 
			if(result%3 ==0) {  // 근데 중간에 나눠지면 원래 나와야하는 최소값보다 낮을수 있으니 모든 값을 찾고 제일 낮은 최소값을 넣어줌
				 
				int three = result/3;
				int threeStack = three+stack; 
				minStack = Math.min(threeStack, minStack);
				
				continue;
			}else {
				continue;
			}
			
		}
		
		if(stack != 1 && minStack != Integer.MAX_VALUE) { // minstack에 1만 들어오거나 초기값 그대로라면 불가능한 수 이기 때문에 조건식
		return minStack;
		}else {
			return 0;
		}
		
		
		
		
	}
	public static int findB(int result) {  // 수가 3으로 나눠지는지 확인하는 메소드
		
		int stack = 0; 
		while (result > 2) {  
		if(result%3 == 0) {
			stack += result / 3;
			result = result % 3;
		}else {
			break;
		}
		}
		return stack;
	}
}
